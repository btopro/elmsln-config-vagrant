<?php
/**
 * @file
 * Code for the Example CIS feature.
 */
include_once 'cis_example_cis.features.inc';

/**
 * Implements hook_entity_presave().
 */
function cis_example_cis_entity_presave($entity, $type) {
  // potentially alter the data of sections just before saving
  // only do this if dates are not set, this happens when built programatically
  if ($type == 'field_collection_item' && $entity->field_name == 'field_sections' && empty($entity->field_access_dates)) {
    $dates = _cis_example_utility_university_dates($entity->HostEntity()->field_semester['und'][0]['value'], $entity->HostEntity()->field_year['und'][0]['value']);
    // verify that we actually got valid dates
    if (!empty($dates)) {
      // value is start date
      $entity->field_access_dates['und'][0]['value'] = $dates['start'];
      // value2 is end date
      $entity->field_access_dates['und'][0]['value2'] = $dates['end'];
      // class officially starts a week into duration
      $entity->field_course_start['und'][0]['value'] = $dates['class_begin'];
    }
  }
}

/**
 * Implements hook_cis_quick_submit_alter().
 */
function cis_example_cis_cis_quick_submit_alter(&$section, &$offering) {
  // load the start / end date based on university calender
  $dates = _cis_example_utility_university_dates($offering->field_semester['und'][0]['value'], $offering->field_year['und'][0]['value']);
  // verify that we actually got valid dates
  if (!empty($dates)) {
    // value is start date
    $section->field_access_dates[LANGUAGE_NONE][0]['value'] = $dates['start'];
    // value2 is end date
    $section->field_access_dates[LANGUAGE_NONE][0]['value2'] = $dates['end'];
    // class officially starts a week into duration
    $section->field_course_start[LANGUAGE_NONE][0]['value'] = $dates['class_begin'];
  }
}

/**
 * Implements hook_form_alter().
 */
function cis_example_cis_form_alter(&$form, &$form_state, $form_id) {
  // alter settings specific to CIS on quick launch page
  if ($form_id == 'cis_helper_quick_setup_page') {
    // convert campus to select field with options
    $form['details']['section']['campus']['#type'] = 'select';
    $form['details']['section']['campus']['#options'] = _cis_example_utility_campus_list();
    // handle LTI request if one is detected
    if (isset($_GET['lti_launch'])) {
      $form['course']['#visible'] = FALSE;
      $lti_launch = drupal_json_decode(str_replace('&quot;', '"', $_GET['lti_launch']));
      // convert to only the values we care about for Example
      $lti = _cis_example_utility_lti_translation($lti_launch);
      // account for section string set but not course
      if (!empty($lti['section']['string']) && empty($lti['course']['machine_name'])) {
        $exp = explode('___', $lti['section']['string']);
        $exp = explode('__', $exp[1]);
        $lti['course']['name'] = $exp[0];
        $exp[1] = str_replace('_', '', substr($exp[1], 0, count($exp[1]) - 4));
        $lti['course']['name'] = $exp[0] . ' ' . $exp[1];
        $lti['course']['machine_name'] = strtolower($exp[0] . $exp[1]);
      }
      $populated = array();
      // convert to hidden element since this was just populated from url
      $form['course']['#type'] = 'hidden';
      // prepopulate course to create based on LTI request
      if (array_key_exists($lti['course']['machine_name'], $form['course']['#options'])) {
        $form['course']['#default_value'] = $lti['course']['machine_name'];
        $populated[] = array(t('Course'), $lti['course']['name'] . ' : ' . $lti['course']['title']);
      }
      else {
        // this is a new course so populate form
        $form['new_course']['new_name']['#default_value'] = $lti['course']['name'];
        // set course title
        $form['new_course']['new_title']['#default_value'] = $lti['course']['title'];
        $populated[] = array(t('Course'), $lti['course']['name'] . ' : ' . $lti['course']['title']);
        // set access to lms if this came from lms
        if ($lti['source']['name'] == 'lms') {
          $form['new_course']['access']['#default_value'] = 'lms';
          $populated[] = array(t('Access'), t('Students in my lms section'));
        }
        // collapse new course form
        $form['new_course']['#collapsed'] = TRUE;
      }
      // collapse details area by default to clean up form
      $form['details']['#collapsed'] = TRUE;
      // set default service to course flow
      $services = _cis_helper_assemble_entity_list('node', 'service', 'field_machine_name', 'nid');
      // currently, course is the only default
      // TODO: make a UI as to when to use this
      $form['details']['services']['#default_value'] = array($services['courses']);
      // populate the offering semester
      $form['details']['offering']['semester']['#default_value'] = $lti['section']['semester'];
      // collapse offering
      $form['details']['offering']['#collapsed'] = TRUE;
      $populated[] = array(t('Semester'), $lti['section']['semester']);
      // populate the offering year
      $form['details']['offering']['year']['#default_value'] = $lti['section']['year'];
      $populated[] = array(t('Year'), $lti['section']['year']);
      // collapse section
      $form['details']['section']['#collapsed'] = TRUE;
      // populate section information
      $form['details']['section']['access_string']['#default_value'] = $lti['section']['string'];
      $populated[] = array(t('lms section'), $lti['section']['string']);
      // populate instructor from LTI launch user
      $form['details']['section']['instructor']['#default_value'] = $lti['user']['name'];
      $populated[] = array(t('Instructor'), $lti['user']['name']);
      // set section number
      $form['details']['section']['number']['#default_value'] = $lti['section']['number'];
      $populated[] = array(t('Section number'), $lti['section']['number']);
      // set campus code
      $form['details']['section']['campus']['#default_value'] = $lti['section']['campus'];
      $populated[] = array(t('Campus code'), $lti['section']['campus']);
      // add additional js to hide these elements from view
      //drupal_add_js(drupal_get_path('module', 'cis_example_cis') .'/js/cis_example_cis.js');
      // add section to top of form indicating what was prepopulated
      $output = '';
      foreach($populated as $values) {
        $output .= '<strong>' . $values[0] . '</strong> - ' . $values[1] . '<br />';
      }
      $form['launch_details'] = array(
        '#markup' => $output,
        '#weight' => -10,
      );
      // create an advanced container as lti calls are all advanced
      // if changed from the default state
      $form['_cis_advanced'] = array(
        '#description' => t('Only modify these if you have reason to do so.'),
        '#collapsed' => '1',
        '#type' => 'fieldset',
        '#collapsible' => '1',
        '#title' => t('Advanced'),
      );
      $form['_cis_advanced']['new_course'] = $form['new_course'];
      unset($form['new_course']);
      $form['_cis_advanced']['details'] = $form['details'];
      unset($form['details']);
    }
  }
  // get official Examples dates
  if ($form_id == 'field_collection_item_form') {
    // only load if this is a new section
    if (is_null($form_state['build_info']['args'][0]->item_id)) {
      // load offering from the address
      $offerings = entity_load('field_collection_item', array(arg(4)));
      // only 1 item so pop it off for access
      $offering = array_pop($offerings);
      // load the start / end date based on university calender
      if (isset($offering)) {
        $dates = _cis_example_utility_university_dates($offering->field_semester['und'][0]['value'], $offering->field_year['und'][0]['value']);
        // verify that we actually got valid dates
        if (!empty($dates)) {
          // value is start date
          $form['field_access_dates']['und'][0]['#default_value']['value'] = $dates['start'];
          // value2 is end date
          $form['field_access_dates']['und'][0]['#default_value']['value2'] = $dates['end'];
          // class officially starts a week into duration
          $form['field_course_start']['und'][0]['#default_value']['value'] = $dates['class_begin'];
        }
      }
    }
  }
  // set campus to example specific ones on field form
  if ($form_id == 'field_ui_field_edit_form' && isset($form_state['field']['field_campus'])) {
    $campuses = _cis_example_utility_campus_list();
    $values = array();
    foreach ($campuses as $code => $name) {
      $values[] = $code . '|' . $name;
    }
    $form['field']['settings']['allowed_values']['#default_value'] = implode("\n", $values);
  }
}

/**
 * Implements hook_cis_service_instance_options_alter().
 */
function cis_example_cis_cis_service_instance_options_alter(&$options, $course, $service) {
  // disable pathauto
  $options['dis'][] = 'pathauto';
  $options['dis'][] = 'path';
  // uninstall these items
  $options['pm-uninstall'][] = 'pathauto';
  $options['pm-uninstall'][] = 'path';
  // enable example authentication / connection mechanisms
  $options['en'][] = 'cis_example_utility';
  $options['en'][] = 'cis_example_cis_service';
  // check on method of access for potential features to revert
  if (in_array($course->field_method_of_access['und'][0]['value'], array('authenticated', 'code', 'lms'))) {
    $options['fr'][] = 'cis_account_required';
    if ($course->field_method_of_access['und'][0]['value'] != 'authenticated') {
      $options['fr'][] = 'cis_lms_required';
    }
  }
  // allow users to register without approval
  $options['vset'][] = 'user_register 1';
  // don't require email verification
  $options['vset'][] = 'user_email_verification 0';
  // preprocess defaults
  $options['vset'][] = 'preprocess_css 1';
  $options['vset'][] = 'preprocess_js 1';
  // set the private files directory automatically, specific to course name
    $options['vset'][] = 'file_private_path /var/www/elmsln/config/private_files/' . $service->field_machine_name[LANGUAGE_NONE][0]['value'] . '/' . $course->field_machine_name[LANGUAGE_NONE][0]['value'];
  // for mooc enable these specific modifications to the university
  if ($service->field_distribution['und'][0]['value'] == 'mooc') {
    $options['en'][] = 'cis_example_mooc';
    // require WCAG 2.0
    $options['en'][] = 'textbook_wcag20aa';
  }
}

/**
 * Implements hook_profiler_builder_drush_modules_list_alter().
 */
function cis_example_cis_profiler_builder_drush_modules_list_alter(&$project_data, $machine_name) {
  // remove all modules listed as part of Examples package
  unset($project_data['Examples']);
}

/**
 * Implements hook_profiler_builder_modules_list_alter
 */
function cis_example_cis_profiler_builder_modules_list_alter(&$modules) {
  // remove this module
  unset($modules['cis_example_cis']);
}

/**
 * Connect to LMS data source
 */
function _cis_example_cis_connect($data, $bucket = 'lms', $location = 'address', $api = 'exampleapi') {
  // make sure we passed it a valid API
    $settings = _cis_connector_build_registry($bucket);
    if (in_array($api, $settings['apis'])) {
      $args = array(
        'exampleuser' => $settings['user'],
        'examplepassword' =>$settings['pass'],
        'exampleaction' => $api,
      ) + $data;
      $address = $settings[$location] . '?' . http_build_query($args);
      httprl_request($address);
      // send the request off
      $request = httprl_send_request();
      $request = array_pop($request);
      return $request->data;
    }
    return FALSE;
}

/**
 * Implements hook_menu().
 */
function cis_example_cis_menu() {
  $items['cis_example_get_course_list'] = array(
    'title' => '!inst lms sections for !sem',
    'title arguments' => array('!inst' => 1, '!sem' => 2),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_cis_example_cis_get_course_list'),
    'access arguments' => array('access cis get course list'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function cis_example_cis_permission() {
    return array(
    'access cis get course list' =>  array(
      'title' => t('Access CIS Get Course List'),
    ),
  );
}

/**
 * Style results from the instructor query
 */
function _cis_example_cis_get_course_list($form, $form_state) {
  $username = arg(1);
  $semester = arg(2);
  if (!empty($username)) {
    module_load_include('inc', 'cis_example_cis', 'DOMToArrayDocument');
    $data = array(
      'USER_ID' => check_plain(drupal_strtoupper($username)),
      'SEMESTER' => check_plain($semester),
    );
    // return xml list of course data
    $results = _cis_example_cis_connect($data, 'lms', 'address', 'exampleapi');
    $dom = new DOMToArrayDocument();
    $dom->loadXml($results);
    $section_result = $dom->toArray();
    // make sure the request was valid
    if ($section_result['Result']['success'] != 'False') {
      $enrollments = $section_result['Result']['enrollment'];
      $header = array('Title', 'Course ID', 'Semester', 'Status', 'Source', 'Setup');
      // check for 1 result as no need to deep loop
      if (isset($enrollments['title'])) {
        $title = $enrollments['title'];
        $course_id = $enrollments['course_id'];
        $semester = $enrollments['semester'];
        // convert t/f to status statement
        if ($enrollments['active'] == 'True') {
          $status = 'Active';
        }
        else {
          $status = 'Inactive';
        }
        $source_courses = '';
        if (isset($enrollments['source_courses']['source_id'])) {
          foreach ($enrollments['source_courses']['source_id'] as $sc) {
            $source_courses .= $sc .' ';
          }
        }
        $build_link = l(t('Setup section'), 'cis-quick-setup-access-id/' . $course_id);
        $rows[] = array($title, $course_id, $semester, $status, $source_courses, $build_link);
      }
      else {
        // loop through each record and convert to table format
        foreach ($enrollments as $section) {
          $title = $section['title'];
          $course_id = $section['course_id'];
          $semester = $section['semester'];
          // convert t/f to status statement
          if ($section['active'] == 'True') {
            $status = 'Active';
          }
          else {
            $status = 'Inactive';
          }
          $source_courses = '';
          if (isset($section['source_courses']['source_id'])) {
            foreach ($section['source_courses']['source_id'] as $sc) {
              $source_courses .= $sc .' ';
            }
          }
          $build_link = l(t('Setup section'), 'cis-quick-setup-access-id/' . $course_id);
          $rows[] = array($title, $course_id, $semester, $status, $source_courses, $build_link);
        }
      }
      $form['markup'] = array(
        '#markup' => theme('table', array('header' => $header, 'rows' => $rows)),
      );
    }
    else {
      $form['markup'] = array(
        '#markup' => t('No results found for that semester / instructor'),
      );
    }
  }
  else {
    $form['markup'] = array(
      '#markup' => t('Instructor is required, semester is preferred'),
    );
  }
  // prepare an inline form since no values were passed as arguments
  $form['username'] = array(
    '#title' => t('Instructor'),
    '#description' => t('Instructor to look up courses for'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#default_value' => $username,
  );
  $semesters = array(
    '' => 'Select a semester',
    '201314FA' => 'Fall 13-14',
    '201314SP' => 'Spring 13-14',
    '201314S1' => 'Summer 13-14',

    '201415FA' => 'Fall 14-15',
    '201415SP' => 'Spring 14-15',
    '201415S1' => 'Summer 14-15',

    '201516FA' => 'Fall 15-16',
    '201516SP' => 'Spring 15-16',
    '201516S1' => 'Summer 15-16',

    '201617FA' => 'Fall 16-17',
    '201617SP' => 'Spring 16-17',
    '201617S1' => 'Summer 16-17',

    '201718FA' => 'Fall 17-18',
    '201718SP' => 'Spring 17-18',
    '201718S1' => 'Summer 17-18',
  );
  $form['semester'] = array(
    '#type' => 'select',
    '#options' => $semesters,
    '#title' => t('Semester'),
    '#default_value' => $semester,
    '#description' => t('Semester to look up'),
  );
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Lookup sections'),
  );
  return $form;
}

/**
 * Submit handler for _cis_example_cis_get_course_list.
 */
function _cis_example_cis_get_course_list_submit($form, $form_state) {
  $link = $form_state['values']['username'];
  if (!empty($form_state['values']['semester'])) {
    $link .= '/' . $form_state['values']['semester'];
  }
  // redirect to part of path that provides the filtering
  drupal_goto("cis_example_get_course_list/$link");
}

/**
 * Implements hook_admin_paths().
 */
function cis_example_cis_admin_paths() {
  $paths = array(
    'cis_example_get_course_list/*' => TRUE,
  );
  return $paths;
}
